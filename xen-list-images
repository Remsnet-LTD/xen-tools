#!/usr/bin/perl -w

=head1 NAME

xen-list-images - List all the created and configured Xen images.

=head1 SYNOPSIS

  xen-list-image [options]


  Help Options:
   --help     Show this scripts help information.
   --manual   Read this scripts manual.

  General Options:
   --dir      Specify where the output images are located.


=head1 OPTIONS

=over 8

=item B<--dir>
Specify the output directory where images were saved.

=item B<--help>
Show the script help

=item B<--manual>
Read the manual

=back


=head1 DESCRIPTION


  xen-list-images is a simple script which will display all the
 images which have been created in a given directory.

  The script follows the same pattern as the other scripts, it
 assumes that all images are stored beneath a prefix directory
 in a layout such as this:

   $dir/domains/vm01.my.flat/
   $dir/domains/vm01.my.flat/disk.img
   $dir/domains/vm01.my.flat/swap.img

   $dir/domains/vm02.my.flat/
   $dir/domains/vm02.my.flat/disk.img
   $dir/domains/vm02.my.flat/swap.img

  For each subdirectory found beneath $dir/domains the image will
 be tested if:

   1.  The disk.img file exists.
   2.  The swap.img file exists.
   3.  A configuration file /etc/xen/$name.cfg exists.

  If these conditions are met the name will be output, along with
 networking information.


=head1 AUTHOR


 Steve
 --
 http://www.steve.org.uk/

 $Id: xen-list-images,v 1.4 2005-12-20 14:35:09 steve Exp $

=cut


=head1 LICENSE

Copyright (c) 2005 by Steve Kemp.  All rights reserved.

This module is free software;
you can redistribute it and/or modify it under
the same terms as Perl itself.
The LICENSE file contains the full text of the license.

=cut


use strict;
use English;
use File::Temp qw/ tempdir /;
use Getopt::Long;
use Pod::Usage;


#
#  Configuration options, initially read from the configuration files
# but may be overridden by the command line.
#
#  Command line flags *always* take precedence over the configuration files(s).
#
my %CONFIG;




#
#  Read configuration file(s) if they exist.
#
if ( -e "/etc/xen-tools/xen-tools.conf" )
{
    readConfigurationFile( "/etc/xen-tools/xen-tools.conf" );
}
if ( -e $ENV{'HOME'} . ".xen-tools.conf" )
{
    readConfigurationFile( $ENV{'HOME'} . ".xen-tools.conf" );
}


#
#  Parse command line arguments, these override the values from the
# configuration file.
#
parseCommandLineArguments();


#
#  If we're not root stop here - root can't do the mounting which
# is required to find the networking details.
#
if ( $EFFECTIVE_USER_ID != 0 )
{
    print <<E_O_ROOT;

  In order to use this script you must be running with root privileges.

  (This is necessary to mount the disk images to determine networking info.)

E_O_ROOT

    exit;
}


my $dir = $CONFIG{'dir'}  . "/domains/";

foreach my $entry ( glob( $dir . "*" ) )
{
   if ( $entry =~ /(.*)\/domains\/(.*)/ )
   {	
       $entry = $2;
   }

   #
   # Xen configuration file.
   #
   if ( -e "/etc/xen/" . $entry . ".cfg" )
   {
       my $image = $CONFIG{'dir'} . "/domains/$entry/disk.img";
       my $swap  = $CONFIG{'dir'} . "/domains/$entry/swap.img";

       #
       #  Disk && Swap files.
       #
       if ( ( -e $image ) &&
	    ( -e $swap ) )
       {

	   print "Image: $entry ";
	   #
	   # Mount the image securely
	   #
	   my $dir = tempdir( CLEANUP => 1 );
	   my $mount_cmd = "mount -t auto -o loop $image $dir";
	   `$mount_cmd`;


	   #
	   #  Read /etc/network/interfaces
	   #
	   my $found = 0;
	   open( IN, "<", $dir . "/etc/network/interfaces" );
	   foreach my $line ( <IN> )
	   {
	       if ( ( $line =~ /dhcp/ ) &&
		    ( $line =~ /eth/ ) )
	       {
		   print " DHCP\n";
		   $found = 1;
	       }
	       if ( $line =~ /address ([0-9\.]+)/ )
	       {
		   print $1 . "\n";
		   $found = 1;
	       }
	   }
	   close( IN );
	   if ( ! $found ) { print "Unknown IP address\n"; }

	   #
	   # Unmount the image.
	   #
	   `umount $dir`;

       }
   }
}


#
#  All done.
#
exit;



=head2 readConfigurationFile

  Read the configuration file specified.

=cut

sub readConfigurationFile
{
    my ($file) = ( @_ );

    open( FILE, "<", $file ) or die "Cannot read file '$file' - $!";

    my $line       = ""; 

    while (defined($line = <FILE>) ) 
    {
        chomp $line;
	if ($line =~ s/\\$//) 
	{
	    $line .= <FILE>;
	    redo unless eof(FILE);
	}
      
	# Skip lines beginning with comments
	next if ( $line =~ /^([ \t]*)\#/ );

	# Skip blank lines
	next if ( length( $line ) < 1 );

	# Strip trailing comments.
	if ( $line =~ /(.*)\#(.*)/ )
	{
	    $line = $1;
	}

	# Find variable settings
	if ( $line =~ /([^=]+)=([^\n]+)/ )
	{
	    my $key = $1;
	    my $val = $2;

	    # Strip leading and trailing whitespace.
	    $key =~ s/^\s+//;
	    $key =~ s/\s+$//;
	    $val =~ s/^\s+//;
	    $val =~ s/\s+$//;
	    
	    # Store value.
	    $CONFIG{ $key } = $val;
	}
    }

    close( FILE );
}




=head2 parseCommandLineArguments

  Parse the arguments specified upon the command line.

=cut

sub parseCommandLineArguments
{
    my $HELP   = 0;
    my $MANUAL = 0;

    #  Parse options.
    #
    GetOptions(
	       "dir=s",      \$CONFIG{'dir'},
	       "help",       \$HELP,
	       "manual",     \$MANUAL
	      );
    
    pod2usage(1) if $HELP;
    pod2usage(-verbose => 2 ) if $MANUAL;
}


