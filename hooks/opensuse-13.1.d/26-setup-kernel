#!/bin/sh
#
#  This script sets up the kernel and fstab for OpenSuSE 13.1
#
# https://github.com/remsnet/xen-tools

prefix=$1

#
#  Source our common functions
#
if [ -e /usr/share/xen-tools/common.sh ]; then
    . /usr/share/xen-tools/common.sh
else
    . ./hooks/common.sh
fi

#
# Log our start
#

logMessage Script $0 starting


# Make the console work
touch ${prefix}/etc/inittab
sed -i "/Cancelled/ {G;s/$/co:2345:respawn:\/sbin\/mingetty console/;}" ${prefix}/etc/inittab
sed -i "s/^1:2345/#1:2345/" ${prefix}/etc/inittab

# setup xenblk devalias
echo "alias scsi_hostadapter xenblk" >> /etc/modprobe.d/10-xenblk.conf

# MAKEDEV is needed at this point
chroot ${prefix} zypper --non-interactive install makedev
chroot ${prefix} ln -s /sbin/MAKEDEV /dev/MAKEDEV
chroot ${prefix} cd /dev ;/sbin/MAKEDEV sda

# Create fstab
logMessage Create /etc/fstab
cat > ${prefix}/etc/fstab << EOF
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
#
proc            /proc           proc    defaults        0       0
none            /dev/pts        devpts  mode=0620       0       0
#
EOF

for i in `seq 1 $NUMPARTITIONS`; do
  echo -n "/dev/sda$i " >> ${prefix}/etc/fstab
  eval part=\$PARTITION$i
  if [ -n "`echo $part | grep swap`" ]; then
     echo "none swap ws 0 0" >> ${prefix}/etc/fstab
  else
     echo $part | awk -F: '{print $4,$3,$5,0,1}' >> ${prefix}/etc/fstab
  fi
done


# Install the kernel, grub and perl

set -x

chroot ${prefix} zypper --non-interactive clean expire-cache
chroot ${prefix} zypper --non-interactive ref
chroot ${prefix} zypper --non-interactive install wget
chroot ${prefix} zypper --non-interactive --gpg-auto-import-keys dup
#
# oss specific : PBL_SKIP_BOOT_TEST reqired if /boot been not an mount
chroot   ${prefix} test -x  /etc/profile.d/boot_pbl_skip_boot.sh || echo "export PBL_SKIP_BOOT_TEST=1" >/etc/profile.d/boot_pbl_skip_boot.sh; chmod 750 /etc/profile.d/boot_pbl_skip_boot.sh
#

# prepare to install lastest stable oss13.1 +3.11 kernel-xen
chroot ${prefix} zypper --non-interactive install  wget
chroot ${prefix} wget -O /etc/zypp/repos.d/Kernel:openSUSE-13.1.repo http://download.opensuse.org/repositories/Kernel:/openSUSE-13.1/standard/Kernel:openSUSE-13.1.repo

# prepare to install lastest unstable +3.15 kernel-xen
#chroot ${prefix} wget -O  /etc/zypp/repos.d/Kernel:HEAD.repo http://download.opensuse.org/repositories/Kernel:/HEAD/standard/Kernel:HEAD.repo

chroot ${prefix} zypper --non-interactive --gpg-auto-import-keys  ref

#
# debug avalible kernel pkgs .. outputs to xen logfile
#
chroot ${prefix} zypper --non-interactive install kernel-xen kernel-firmware
chroot ${prefix} zypper --non-interactive dup

KERNELVERSION=`ls ${prefix}/boot/vmlinuz-* | xargs | awk -F " " '{ print $1 }' | sed "s#$prefix/boot/vmlinuz-##"`
logMessage "Kernel $KERNELVERSION found"

# Create grub's menu.list
logMessage "Creating /boot/grub/menu.lst"

if [ ! -d ${prefix}/boot/grub ]; then
        mkdir -p ${prefix}/boot/grub
fi

#
# create device.map
test -f ${prefix}/boot/grub/device.map && mv -f  ${prefix}/boot/grub/device.map  ${prefix}/boot/grub/device.map.old
echo "(hd0)   /dev/xvda" > ${prefix}/boot/grub/device.map

# create default grub.conf
test -f ${prefix}/etc/grub.conf && mv -f  ${prefix}/etc/grub.conf ${prefix}/etc/grub.conf.old
echo 'setup --stage2=/boot/grub/stage2 --force-lba (hd0,0) (hd0,0)' >${prefix}/etc/grub.conf

#
# create boot menu
cat > ${prefix}/boot/grub/menu.lst << EOF
# WARNING : Don't forget to update this when you upgrade kernel !
# You can also exclude kernel-xen from updates by putting
# exclude=kernel-xen in in [main] in zypper.conf

# http://oreilly.com/linux/excerpts/9780596100797/kernel-boot-command-line-parameter-reference.html
# http://landley.net/writing/rootfs-programming.html

default=0
timeout=5
title OpenSuSE  x86_64 13.1 ($KERNELVERSION) Paravirtual Guest
kernel        /boot/vmlinuz-$KERNELVERSION init=/sbin/oss-xen-init elevator=noop console=tty0 console=hvc0 noresume selinux=0 initcall_debug load_ramdisk=1 root=/dev/xvda rdinit=/bin/sh
initrd        /boot/initramfs-$KERNELVERSION
EOF

# Some use lvm but mkinitrd will generate a wrong initrd when these are present.
rm -f ${prefix}/etc/lvm/backup/* ${prefix}/etc/lvm/archive/*

if [ ! -d ${prefix}/etc/sysconfig ]; then
mkdir -p ${prefix}/etc/sysconfig
fi


if [  -f ${prefix}/etc/sysconfig/kernel ]; then
cat ${prefix}/etc/sysconfig/kernel | sed -e "s/INITRD_MODULES=\"\"/INITRD_MODULES=\"xennet xenblk xenscsi netxen_nic xenbus_be sfc_netfront blktap tpm_xenu xfs loop i915 xen_wdt processor thermal ahci fan jbd ext3 edd \"/" > ${prefix}/etc/sysconfig/kernel.new
mv -f  ${prefix}/etc/sysconfig/kernel  ${prefix}/etc/sysconfig/kernel.orig
mv  ${prefix}/etc/sysconfig/kernel.new -f  ${prefix}/etc/sysconfig/kernel
fi

mount -o bind /proc ${prefix}/proc
mount -o bind /sys ${prefix}/sys
mount -o bind /dev ${prefix}/dev


chroot ${prefix} mkinitrd
chroot ${prefix} /sbin/mkBusyBoxinitramfs


umount -f  ${prefix}/proc
umount -f  ${prefix}/sys
umount -f  ${prefix}/dev



#
#  Log our finish
#
logMessage Script $0 finished
